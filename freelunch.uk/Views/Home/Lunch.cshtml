@model freelunch.uk.Models.LunchesViewModel
@{
    string topics = "";
}
<div class="well well-lg">
    <h2><i class="fa fa-cutlery" aria-hidden="true"></i> Lunch.</h2>

    <div class="row">
        <div class="col-md-6">
            Find a lunch...
        </div>

        @using (Html.BeginForm("SearchLunch", "Home", FormMethod.Post, new { id = "searchLunchForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="input-group col-md-6">
                @Html.TextBoxFor(s => s.Search, new { @class = "form-control pull-right", @placeholder = "Search for... " })
                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                        <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                    </button>
                </span>
            </div>
        }
    </div>
</div>

<p class="text-success">@ViewBag.StatusMessage</p>

@if (!Request.IsAuthenticated)
{
    <p class="text-success">You need to be a registered user and signed in to express your interest in a lunch.</p>
}

@foreach (var lunch in Model.Lunches)
{
    string contactLunch = "contactLunch" + lunch.UserId;

    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">
                @Html.Encode(lunch.Name)

                @if (Request.IsAuthenticated)
                {
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#@contactLunch">
                        <span class="fa fa-envelope" aria-hidden="true"></span> Contact
                    </button>
                }
            </h3>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="dl-horizontal">

                        <dt>@Html.DisplayNameFor(l => l.DummyLunch.Website)</dt>
                        <dd>@Html.Encode(lunch.Website)</dd>

                        <dt>@Html.DisplayNameFor(l => l.DummyLunch.ContactName)</dt>
                        <dd>@Html.Encode(lunch.ContactName)</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="dl-horizontal">
                        @foreach (var topic in lunch.Topics)
                        {
                            if (!string.IsNullOrEmpty(topics))
                            {
                                topics += ", ";
                            }

                            topics += topic.Name;
                        }

                        @{                          
                            topics = "SOLID, C#, Clean Code";
                        }

                        <dt>@Html.DisplayNameFor(s => s.DummyTopic.Name)</dt>
                        <dd>@Html.Encode(topics)</dd>

                        <dt>@Html.DisplayNameFor(l => l.DummyLunch.Audience)</dt>
                        <dd>@Html.Encode(lunch.Audience)</dd>
                        <dt>@Html.DisplayNameFor(l => l.DummyLunch.AudienceNumber)</dt>
                        <dd>@Html.Encode(lunch.AudienceNumber)</dd>
                    </dl>

                </div>
            </div>
        </div>
    </div>

    if (Request.IsAuthenticated)
    {
        <div id="@contactLunch" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close close-button" data-dismiss="modal">
                            <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>
                        </button>
                        <h4 class="modal-title">Contact</h4>
                    </div>
                    <p></p>
                    <section id="editForm">
                        @using (Html.BeginForm("ContactLunch", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            <div class="modal-body">
                                @Html.AntiForgeryToken()

                                <dl class="dl-horizontal">
                                    <dt>@Html.DisplayNameFor(l => l.DummyLunch.Name)</dt>
                                    <dd>@Html.Encode(lunch.Name)</dd>
                                    <dt>@Html.DisplayNameFor(l => l.DummyLunch.ContactName)</dt>
                                    <dd>@Html.Encode(lunch.ContactName)</dd>
                                </dl>

                                <div class="anti-spam">
                                    @Html.TextBoxFor(l => l.URL)
                                    @Html.TextBoxFor(l => l.Search)
                                    @Html.Hidden(lunch.UserId)
                                </div>

                                <hr />
                                <div class="form-group">
                                    @Html.LabelFor(l => l.Sender, new { @class = "col-md-3 col-md-offset-1 control-label" })
                                    <div class="col-md-7">
                                        @Html.TextBoxFor(l => l.Sender, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(l => l.Sender, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="help-tip">
                                    <p>The details you provide here will be passed on to the contact of the selected lunch.</p>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(l => l.Email, new { @class = "col-md-3 col-md-offset-1 control-label" })
                                    <div class="col-md-7">
                                        @Html.TextBoxFor(l => l.Email, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(l => l.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(l => l.Message, new { @class = "col-md-3 col-md-offset-1 control-label" })
                                    <div class="col-md-7">
                                        @Html.TextAreaFor(l => l.Message, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(l => l.Message, "", new { @class = "text-danger" })
                                        <span class="help-block">Provide a description of what you are offering.</span>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-default">
                                        <span class="fa fa-envelope" aria-hidden="true"></span>  Send
                                    </button>
                                    <button type="button" class="btn btn-default" data-dismiss="modal">
                                        <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span> Cancel
                                    </button>
                                </div>
                            </div>
                        }
                    </section>
                </div>
            </div>
        </div>
    }
}